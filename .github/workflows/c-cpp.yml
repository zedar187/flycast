name: C/C++ CI

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    defaults:
      run:
        shell: ${{ matrix.config.shell }}

    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    strategy:
      matrix:
        config:
          - {name: apple-darwin, os: macos-latest, shell: sh, cmakeArgs: -G Xcode -DUSE_DISCORD=OFF -DUSE_BREAKPAD=OFF -DENABLE_GDB_SERVER=ON, destDir: osx, buildType: RelWithDebInfo}

    steps:
      - name: Set up build environment (macOS)
        run: |
          # Unlink and re-link to prevent errors when github mac runner images install python outside of brew. See https://github.com/actions/setup-python/issues/577
          brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
          brew update || :
          brew install libao ldid ninja pulseaudio
          brew uninstall --ignore-dependencies zstd
          VULKAN_VER=1.3.261.1 && aria2c https://sdk.lunarg.com/sdk/download/$VULKAN_VER/mac/vulkansdk-macos-$VULKAN_VER.dmg
          hdiutil attach ./vulkansdk-macos-*.dmg -mountpoint /Volumes/VulkanSDK
          sudo /Volumes/VulkanSDK/InstallVulkan.app/Contents/MacOS/InstallVulkan --root $HOME/VulkanSDK --accept-licenses --default-answer --confirm-command install
          hdiutil detach /Volumes/VulkanSDK
          echo "VULKAN_SDK=$HOME/VulkanSDK/macOS" >> $GITHUB_ENV
        if: runner.os == 'macOS'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Compile a universal OpenMP (macOS)
        run: HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew reinstall --build-from-source --formula ./shell/apple/libomp.rb
        if: matrix.config.name == 'apple-darwin'

      - uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.config.name }}-${{ github.sha }}
          restore-keys: ccache-${{ matrix.config.name }}-
        if: runner.os != 'macOS'

      - name: CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.buildType }} -DCMAKE_INSTALL_PREFIX=artifact ${{ matrix.config.cmakeArgs }} 
          cmake --build build --config ${{ matrix.config.buildType }} --target install

      - uses: actions/upload-artifact@v4
        with:
          name: flycast-${{ matrix.config.name }}
          path: |
            artifact/bin
            artifact/lib/libretro

      - name: Package app (macos)
        run: |
          cd artifact/bin
          zip -rm flycast.app.zip Flycast.app
        if: matrix.config.name == 'apple-darwin'

